Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int a

Line 2: factor : CONST_INT

2

Line 2: unary_expression : factor

2


Line 2: term : unary_expression

2


Line 2: variable : ID

a


Line 2: factor : variable

a


Line 2: unary_expression : factor

a


Line 2: term : term MULOP unary_expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: simple_expression : term

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: rel_expression : simple_expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: logic_expression : rel_expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: expression : logic expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: statement : RETURN expression SEMICOLON

return 2*a;

Line 2: statements : statement

return 2*a;

;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax

Line 3: variable : ID

a


Line 3: factor : CONST_INT

9

Line 3: unary_expression : factor

9


Line 3: term : unary_expression

9


Line 3: simple_expression : term

9


Line 3: rel_expression : simple_expression

9


Line 3: logic_expression : rel_expression

9


Line 3: expression : variable ASSIGNOP logic_expression

a=9

	MOV ax,9
	MOV [bp+12],ax

Line 3: expression_statement : expression SEMICOLON

a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 3: statement : expression_statement

a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 3: statements : statements statement

return 2*a;
a=9;

;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 4: compound_statement : LCURL statements RCURL

{
return 2*a;
a=9;
}

ScopeTable # 1.1
 7 --> < a , ID > 

ScopeTable # 1
 12 --> < f , ID > 

;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int a){
return 2*a;
a=9;
}

Line 4: unit : func_definition

int f(int a){
return 2*a;
a=9;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp

Line 4: program : unit

int f(int a){
return 2*a;
a=9;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp

Line 6: type_specifier : INT

int

Line 6: type_specifier : INT

int

Line 6: parameter_list : type_specifier ID

int a

Line 6: type_specifier : INT

int

Line 6: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 7: type_specifier : INT

int

Line 7: declaration_list : ID

x

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int x;

Line 7: statement : var_declaration

int x;

Line 7: statements : statement

int x;

;int
;x;


Line 8: variable : ID

x


Line 8: variable : ID

a


Line 8: factor : variable

a


Line 8: unary_expression : factor

a


Line 8: term : unary_expression

a


Line 8: simple_expression : term

a


Line 8: rel_expression : simple_expression

a


Line 8: logic_expression : rel_expression

a


Line 8: arguments : logic_expression

a

Line 8: argument_list : arguments

a
Line 8: factor : ID LPAREN argument_list RPAREN

f(a)
	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: unary_expression : factor

f(a)

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: term : unary_expression

f(a)

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: simple_expression : term

f(a)

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: variable : ID

a


Line 8: factor : variable

a


Line 8: unary_expression : factor

a


Line 8: term : unary_expression

a


Line 8: +
simple_expression : simple_expression ADDOP term

f(a)+a

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax

Line 8: variable : ID

b


Line 8: factor : variable

b


Line 8: unary_expression : factor

b


Line 8: term : unary_expression

b


Line 8: +
simple_expression : simple_expression ADDOP term

f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax

Line 8: rel_expression : simple_expression

f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax

Line 8: logic_expression : rel_expression

f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax

Line 8: expression : variable ASSIGNOP logic_expression

x=f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 8: expression_statement : expression SEMICOLON

x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 8: statement : expression_statement

x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 8: statements : statements statement

int x;
x=f(a)+a+b;

;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 9: variable : ID

x


Line 9: factor : variable

x


Line 9: unary_expression : factor

x


Line 9: term : unary_expression

x


Line 9: simple_expression : term

x


Line 9: rel_expression : simple_expression

x


Line 9: logic_expression : rel_expression

x


Line 9: expression : logic expression

x


Line 9: statement : RETURN expression SEMICOLON

return x;

Line 9: statements : statements statement

int x;
x=f(a)+a+b;
return x;

;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax

Line 10: compound_statement : LCURL statements RCURL

{
int x;
x=f(a)+a+b;
return x;
}

ScopeTable # 1.2
 0 --> < x , ID > 
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 12 --> < f , ID > 
 13 --> < g , ID > 

;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax

Line 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}

Line 10: unit : func_definition

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp

Line 10: program : program unit

int f(int a){
return 2*a;
a=9;
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp
g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp

Line 12: type_specifier : INT

int

Line 13: type_specifier : INT

int

Line 13: declaration_list : ID

a

Line 13: declaration_list : declaration_list COMMA ID

a,b

Line 13: var_declaration : type_specifier declaration_list SEMICOLON

int a,b;

Line 13: statement : var_declaration

int a,b;

Line 13: statements : statement

int a,b;

;int
;a,b;


Line 14: variable : ID

a


Line 14: factor : CONST_INT

1

Line 14: unary_expression : factor

1


Line 14: term : unary_expression

1


Line 14: simple_expression : term

1


Line 14: rel_expression : simple_expression

1


Line 14: logic_expression : rel_expression

1


Line 14: expression : variable ASSIGNOP logic_expression

a=1

	MOV ax,1
	MOV a1_3,ax

Line 14: expression_statement : expression SEMICOLON

a=1;

	MOV ax,1
	MOV a1_3,ax

Line 14: statement : expression_statement

a=1;

	MOV ax,1
	MOV a1_3,ax

Line 14: statements : statements statement

int a,b;
a=1;

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax

Line 15: variable : ID

b


Line 15: factor : CONST_INT

2

Line 15: unary_expression : factor

2


Line 15: term : unary_expression

2


Line 15: simple_expression : term

2


Line 15: rel_expression : simple_expression

2


Line 15: logic_expression : rel_expression

2


Line 15: expression : variable ASSIGNOP logic_expression

b=2

	MOV ax,2
	MOV b1_3,ax

Line 15: expression_statement : expression SEMICOLON

b=2;

	MOV ax,2
	MOV b1_3,ax

Line 15: statement : expression_statement

b=2;

	MOV ax,2
	MOV b1_3,ax

Line 15: statements : statements statement

int a,b;
a=1;
b=2;

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax

Line 16: variable : ID

a


Line 16: variable : ID

a


Line 16: factor : variable

a


Line 16: unary_expression : factor

a


Line 16: term : unary_expression

a


Line 16: simple_expression : term

a


Line 16: rel_expression : simple_expression

a


Line 16: logic_expression : rel_expression

a


Line 16: arguments : logic_expression

a

Line 16: variable : ID

b


Line 16: factor : variable

b


Line 16: unary_expression : factor

b


Line 16: term : unary_expression

b


Line 16: simple_expression : term

b


Line 16: rel_expression : simple_expression

b


Line 16: logic_expression : rel_expression

b


Line 16: arguments : arguments COMMA logic_expression

a,b

Line 16: argument_list : arguments

a,b
Line 16: factor : ID LPAREN argument_list RPAREN

g(a,b)
	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 16: unary_expression : factor

g(a,b)

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 16: term : unary_expression

g(a,b)

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 16: simple_expression : term

g(a,b)

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 16: rel_expression : simple_expression

g(a,b)

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 16: logic_expression : rel_expression

g(a,b)

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 16: expression : variable ASSIGNOP logic_expression

a=g(a,b)

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax

Line 16: expression_statement : expression SEMICOLON

a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax

Line 16: statement : expression_statement

a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax

Line 16: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax

Line 17: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 17: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);
printf(a);

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax
;printf(a);

	MOV ax,a1_3
	MOV print_var,ax
	CALL print

Line 18: factor : CONST_INT

0

Line 18: unary_expression : factor

0


Line 18: term : unary_expression

0


Line 18: simple_expression : term

0


Line 18: rel_expression : simple_expression

0


Line 18: logic_expression : rel_expression

0


Line 18: expression : logic expression

0


Line 18: statement : RETURN expression SEMICOLON

return 0;

Line 18: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);
printf(a);
return 0;

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax
;printf(a);

	MOV ax,a1_3
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax

Line 19: compound_statement : LCURL statements RCURL

{
int a,b;
a=1;
b=2;
a=g(a,b);
printf(a);
return 0;
}

ScopeTable # 1.3
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 1 --> < main , ID > 
 12 --> < f , ID > 
 13 --> < g , ID > 

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax
;printf(a);

	MOV ax,a1_3
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax

Line 19: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b;
a=1;
b=2;
a=g(a,b);
printf(a);
return 0;
}

main proc
	mov ax,@data
	mov ds,ax


;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax
;printf(a);

	MOV ax,a1_3
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 19: unit : func_definition

int main(){
int a,b;
a=1;
b=2;
a=g(a,b);
printf(a);
return 0;
}


main proc
	mov ax,@data
	mov ds,ax


;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax
;printf(a);

	MOV ax,a1_3
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 19: program : program unit

int f(int a){
return 2*a;
a=9;
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}
int main(){
int a,b;
a=1;
b=2;
a=g(a,b);
printf(a);
return 0;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp
g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp
main proc
	mov ax,@data
	mov ds,ax


;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_3,ax
;b=2;

	MOV ax,2
	MOV b1_3,ax
;a=g(a,b);

	PUSH a1_3
	PUSH b1_3
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_3,ax
;printf(a);

	MOV ax,a1_3
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 20: start : program


ScopeTable # 1
 1 --> < main , ID > 
 12 --> < f , ID > 
 13 --> < g , ID > 


Total lines: 20
Total errors: 0
